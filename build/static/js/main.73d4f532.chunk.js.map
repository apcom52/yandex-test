{"version":3,"sources":["components/Tabs.js","store/AppActionsNames.js","components/Search.js","store/AppActions.js","components/Header.js","components/Plane.js","components/PlanesList.js","App.js","serviceWorker.js","store/AppReducer.js","index.js"],"names":["Tabs","react_default","a","createElement","className","react_router_dom","to","activeClassName","exact","Component","ACTION_PLANES_LIST","ACTION_SEARCH","Search","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onInput","event","value","target","setState","setSearch","toLowerCase","state","type","placeholder","connect","store","search","dispatch","query","arguments","length","undefined","payload","Header","Tabs_Tabs","components_Search","Plane","date","getHours","getMinutes","plane","time","arrival","departure","timeDateObject","Date","timeBlock","realTime","__getTime","thread","number","title","days","vehicle","PlanesList","planesList","__getSchedule","_this2","fetch","then","res","json","schedule","forEach","index","Math","random","__getFactTime","diff","round","getTime","_this3","planes","map","indexOf","Plane_Plane","App","Header_Header","react_router","path","render","components_PlanesList","Boolean","window","location","hostname","match","appData","createStore","action","objectSpread","ReactDOM","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8XAIqBA,0LAEb,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAClBH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASC,GAAG,IAAIF,UAAU,MAAMG,gBAAgB,cAAcC,OAAK,GAAnE,wCACAP,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASC,GAAG,aAAaF,UAAU,MAAMG,gBAAgB,eAAzD,0CAJsBE,sBCJrBC,SAAqB,sBACrBC,EAAgB,oBCIvBC,cACF,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAOVQ,QAAU,SAACC,GACP,IAAMC,EAAQD,EAAME,OAAOD,MAE3BT,EAAKW,SAAS,CACVF,MAAOA,IAGXT,EAAKD,MAAMa,UAAUH,EAAMI,gBAZ3Bb,EAAKc,MAAQ,CACTL,MAAO,IAJIT,wEAmBf,OAAOb,EAAAC,EAAAC,cAAA,SAAO0B,KAAK,SAASzB,UAAU,SAAS0B,YAAY,kHAAwBP,MAAON,KAAKW,MAAML,MAAOF,QAASJ,KAAKI,iBApB7GZ,aAoCNsB,cAZM,SAACC,GAClB,MAAO,CACHC,OAAQD,EAAMC,SAII,SAACC,GACvB,MAAO,CACHR,UAAW,SAAAS,GAAK,OAAID,EC5BrB,WAAgC,IAAbD,EAAaG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GAC/B,MAAO,CACHP,KAAMlB,EACN4B,QAASN,GDyBoBP,CAAUS,OAIhCJ,CAAyCnB,GEpCnC4B,mLAEb,OAAOvC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UACrBH,EAAAC,EAAAC,cAACsC,EAAD,MACAxC,EAAAC,EAAAC,cAACuC,EAAD,cAJwBjC,aCFfkC,2LACPC,GACN,OAAOA,EAAKC,WAAa,KAAOD,EAAKE,aAAe,GAAK,IAAM,IAAMF,EAAKE,8CAI1E,IAAMC,EAAQ9B,KAAKJ,MAAMkC,MACrBC,EAAOD,EAAME,QAAUF,EAAME,QAAUF,EAAMG,UAE3CC,EAAiB,IAAIC,KAAKJ,GAE5BK,EAAY,KAYhB,OAVIA,EADAN,EAAMO,SACMrD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACvBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,qBAAsBa,KAAKsC,UAAUJ,IACrDlD,EAAAC,EAAAC,cAAA,QAAMC,UAAU,2CAA4Ca,KAAKsC,UAAUR,EAAMO,YAGzErD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACvBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oBAAqBa,KAAKsC,UAAUJ,KAIrDlD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAChBiD,EACFpD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAkB2C,EAAMS,OAAOC,QAC9CxD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAiB2C,EAAMS,OAAOE,OAC7CzD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAgB2C,EAAMY,MACrC1D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAmB2C,EAAMS,OAAOI,kBA7B5BnD,cCE7BoD,qBACF,SAAAA,EAAYhD,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA4C,IACf/C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8C,GAAAzC,KAAAH,KAAMJ,KAEDe,MAAQ,CACTkC,WAAY,IAJDhD,mFASfG,KAAK8C,wDAGO,IAAAC,EAAA/C,KACNK,EAAQL,KAAKJ,MAAMS,MAEzB2C,MAAM,QAAU3C,EAAQ,KACnB4C,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAE,GACeA,EAAKC,SAEbC,QAAQ,SAACvB,EAAOwB,GACjBC,KAAKC,SAAW,KAChB1B,EAAMO,SAAWU,EAAKU,cAAc,IAAItB,KAAKL,EAAMiB,EAAKnD,MAAMS,YAItE0C,EAAKvC,SAAS,CACVqC,WAAYM,EAAKC,mDAKnBzB,GACV,IAAM+B,EAAOH,KAAKI,MAAM,GAAuB,GAAjBJ,KAAKC,UACnC,OAAO,IAAIrB,KAAKR,EAAKiC,UAAiB,IAALF,oCAG5B,IAAAG,EAAA7D,KAEC6C,GADQ7C,KAAKJ,MAAMS,MACNL,KAAKW,MAAMkC,YAE9B,GAA0B,IAAtBA,EAAWzB,OACX,OAAOpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBAAf,gFAGX,IAAI2E,EAASjB,EAAWkB,IAAI,SAACjC,GACzB,GAAI+B,EAAKjE,MAAMoB,SAGgC,IAF5Bc,EAAMS,OAAOC,OAAO9B,cAExBsD,QAAQH,EAAKjE,MAAMoB,QAC1B,OAAO,KAIf,OAAOhC,EAAAC,EAAAC,cAAC+E,EAAD,CAAOnC,MAAOA,MAGzB,OAAO9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACjB2E,UA3DYtE,cAsEVsB,cANM,SAACC,GAClB,MAAO,CACHC,OAAQD,EAAMC,SAIPF,CAAsB8B,WCzDtBsB,MAZf,WACE,OACIlF,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACIJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAACiF,EAAD,MACAnF,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CAAO7E,OAAK,EAAC8E,KAAK,IAAIC,OAAQ,WAAO,OAAOtF,EAAAC,EAAAC,cAACqF,EAAD,CAAYlE,MAAM,eAC9DrB,EAAAC,EAAAC,cAACkF,EAAA,EAAD,CAAO7E,OAAK,EAAC8E,KAAK,aAAaC,OAAQ,WAAO,OAAOtF,EAAAC,EAAAC,cAACqF,EAAD,CAAYlE,MAAM,oBCAjEmE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+EChBFC,EAAU,CACVhC,WAAY,GACZ7B,OAAQ,ICKZ,IAAMD,EAAQ+D,YDFC,WAA6C,IAAzBnE,EAAyBQ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjB0D,EAASE,EAAQ5D,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACxD,OAAO0D,EAAOnE,MACV,KAAKnB,EACD,OAAOK,OAAAkF,EAAA,EAAAlF,CAAA,GACAa,EADP,CAEIkC,WAAYkC,EAAOzD,UAE3B,KAAK5B,EACD,OAAOI,OAAAkF,EAAA,EAAAlF,CAAA,GACAa,EADP,CAEIK,OAAQ+D,EAAOzD,UAEvB,QACI,OAAOX,KCTnBsE,IAASX,OACLtF,EAAAC,EAAAC,cAACgG,EAAA,EAAD,CAAUnE,MAAOA,GACb/B,EAAAC,EAAAC,cAACiG,EAAD,OAERC,SAASC,eAAe,SFkHlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,KAAK,SAAAwC,GACjCA,EAAaC","file":"static/js/main.73d4f532.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {BrowserRouter as Router, Route, NavLink} from \"react-router-dom\";\r\nimport '../styles/tabs.scss';\r\n\r\nexport default class Tabs extends Component {\r\n    render() {\r\n        return <div className=\"tabs\">\r\n            <NavLink to=\"/\" className=\"tab\" activeClassName=\"tab--active\" exact>Прилет</NavLink>\r\n            <NavLink to=\"/departure\" className=\"tab\" activeClassName=\"tab--active\">Вылет</NavLink>\r\n        </div>;\r\n    }\r\n}","export const ACTION_PLANES_LIST = 'ACTION_PLANES_LIST';\r\nexport const ACTION_SEARCH = 'ACTION_SEARCH';","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport '../styles/search.scss';\r\nimport {setSearch} from \"../store/AppActions\";\r\n\r\nclass Search extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            value: ''\r\n        };\r\n    }\r\n\r\n    onInput = (event) => {\r\n        const value = event.target.value;\r\n\r\n        this.setState({\r\n            value: value\r\n        });\r\n\r\n        this.props.setSearch(value.toLowerCase());\r\n    };\r\n\r\n    render() {\r\n        return <input type=\"search\" className=\"search\" placeholder=\"Поиск по номеру рейса\" value={this.state.value} onInput={this.onInput} />\r\n    }\r\n}\r\n\r\nconst getStoreData = (store) => {\r\n    return {\r\n        search: store.search\r\n    }\r\n};\r\n\r\nconst dispatchStoreData = (dispatch) => {\r\n    return {\r\n        setSearch: query => dispatch(setSearch(query))\r\n    }\r\n};\r\n\r\nexport default connect(getStoreData, dispatchStoreData)(Search);","import {ACTION_PLANES_LIST, ACTION_SEARCH} from \"./AppActionsNames\";\r\n\r\nexport function setPlanesList(planesList = []) {\r\n    return {\r\n        type: ACTION_PLANES_LIST,\r\n        payload: planesList\r\n    }\r\n}\r\n\r\nexport function setSearch(search = '') {\r\n    return {\r\n        type: ACTION_SEARCH,\r\n        payload: search\r\n    }\r\n};","import React, {Component} from 'react';\r\nimport '../styles/header.scss';\r\nimport Tabs from \"./Tabs\";\r\nimport Search from \"./Search\";\r\n\r\nexport default class Header extends Component {\r\n    render() {\r\n        return <header className=\"header\">\r\n            <Tabs />\r\n            <Search/>\r\n        </header>\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport '../styles/plane.scss';\r\n\r\nexport default class Plane extends Component {\r\n    __getTime(date) {\r\n        return date.getHours() + ':' + (date.getMinutes() < 10 ? '0' : '') + date.getMinutes();\r\n    }\r\n\r\n    render() {\r\n        const plane = this.props.plane;\r\n        let time = plane.arrival ? plane.arrival : plane.departure;\r\n\r\n        const timeDateObject = new Date(time);\r\n\r\n        let timeBlock = null;\r\n        if (plane.realTime) {\r\n            timeBlock = <div className=\"plane__time\">\r\n                <time className=\"plane__wrong-time\">{ this.__getTime(timeDateObject) }</time>\r\n                <time className=\"plane__real-time plane__real-time--late\">{ this.__getTime(plane.realTime) }</time>\r\n            </div>\r\n        } else {\r\n            timeBlock = <div className=\"plane__time\">\r\n                <time className=\"plane__real-time\">{ this.__getTime(timeDateObject) }</time>\r\n            </div>\r\n        }\r\n\r\n        return <div className=\"plane\">\r\n            { timeBlock }\r\n            <div className=\"plane__number\">{ plane.thread.number }</div>\r\n            <div className=\"plane__info\">\r\n                <div className=\"plane__title\">{ plane.thread.title }</div>\r\n                <div className=\"plane__days\">{ plane.days }</div>\r\n                <div className=\"plane__vehicle\">{ plane.thread.vehicle }</div>\r\n            </div>\r\n        </div>;\r\n    }\r\n};","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Plane from \"./Plane\";\r\nimport '../styles/planes-list.scss';\r\n\r\nclass PlanesList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            planesList: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.__getSchedule();\r\n    }\r\n\r\n    __getSchedule() {\r\n        const event = this.props.event;\r\n\r\n        fetch('/api/' + event + '/')\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                const schedule = json.schedule;\r\n\r\n                schedule.forEach((plane, index) => {\r\n                    if (Math.random() < 0.1) {\r\n                        plane.realTime = this.__getFactTime(new Date(plane[this.props.event]));\r\n                    }\r\n                });\r\n\r\n                this.setState({\r\n                    planesList: json.schedule\r\n                });\r\n            });\r\n    }\r\n\r\n    __getFactTime(date) {\r\n        const diff = Math.round(0.5 + Math.random() * (60));\r\n        return new Date(date.getTime() + diff*60000);\r\n    }\r\n\r\n    render() {\r\n        const event = this.props.event;\r\n        const planesList = this.state.planesList;\r\n\r\n        if (planesList.length === 0) {\r\n            return <div className=\"planes-list__message\">Идет загрузка...</div>;\r\n        }\r\n\r\n        let planes = planesList.map((plane) => {\r\n            if (this.props.search) {\r\n                const number = plane.thread.number.toLowerCase();\r\n\r\n                if (number.indexOf(this.props.search) === -1) {\r\n                    return null;\r\n                }\r\n            }\r\n\r\n            return <Plane plane={plane} />\r\n        });\r\n\r\n        return <div className=\"planes-list\">\r\n            {planes}\r\n        </div>\r\n    }\r\n};\r\n\r\nconst getStoreData = (store) => {\r\n    return {\r\n        search: store.search\r\n    }\r\n}\r\n\r\nexport default connect(getStoreData)(PlanesList);","import React from 'react';\nimport './styles/app.scss';\nimport Header from \"./components/Header\";\nimport PlanesList from \"./components/PlanesList\";\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\n\nfunction App() {\n  return (\n      <Router>\n          <div className=\"app\">\n              <Header />\n              <Route exact path=\"/\" render={() => {return <PlanesList event=\"arrival\"/>}} />\n              <Route exact path=\"/departure\" render={() => {return <PlanesList event=\"departure\"/>}} />\n          </div>\n      </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {ACTION_PLANES_LIST, ACTION_SEARCH} from \"./AppActionsNames\";\r\n\r\nlet appData = {\r\n    planesList: [],\r\n    search: ''\r\n};\r\n\r\nexport default function appReducer(state = appData, action) {\r\n    switch(action.type) {\r\n        case ACTION_PLANES_LIST:\r\n            return {\r\n                ...state,\r\n                planesList: action.payload\r\n            };\r\n        case ACTION_SEARCH:\r\n            return {\r\n                ...state,\r\n                search: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport appReducer from './store/AppReducer';\nimport {Provider} from \"react-redux\";\n\nconst store = createStore(appReducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}